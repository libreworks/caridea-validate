<?php
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015 LibreWorks contributors
 * @license   http://opensource.org/licenses/Apache-2.0 Apache 2.0 License
 */
namespace Caridea\Validate;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-07-21 at 14:30:42.
 */
class ValidatorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @covers Caridea\Validate\Validator
     */
    public function testValidate()
    {
        $rule = $this->getMockForAbstractClass(Rule::class);
        $rule->expects($this->once())
            ->method('apply')
            ->willReturn('SUPER_ERROR');
        $object = new Validator([
            'foo' => [$rule]
        ]);
        $result = $object->validate(['foo' => 'bar']);
        $this->assertEquals(['foo' => 'SUPER_ERROR'], $result->getErrors());
        $this->verifyMockObjects();
    }
    
    /**
     * @covers Caridea\Validate\Validator::iterate
     * @expectedException \InvalidArgumentException
     */
    public function testValidateBad()
    {
        $object = new Validator([]);
        $object->validate(123);
    }
    
    /**
     * @covers Caridea\Validate\Validator::assert
     */
    public function testAssert()
    {
        $rule = $this->getMockForAbstractClass(Rule::class);
        $rule->expects($this->once())
            ->method('apply')
            ->willReturn(null);
        $object = new Validator([
            'foo' => [$rule]
        ]);
        $object->assert(['foo' => 'bar']);
        $this->verifyMockObjects();
    }
    
    /**
     * @covers Caridea\Validate\Validator::assert
     * @expectedException \Caridea\Validate\Exception\Invalid
     * @expectedExceptionMessage Validation failed: {"foo":"SUPER_ERROR"}
     */
    public function testAssertBad()
    {
        $rule = $this->getMockForAbstractClass(Rule::class);
        $rule->expects($this->once())
            ->method('apply')
            ->willReturn('SUPER_ERROR');
        $object = new Validator([
            'foo' => [$rule]
        ]);
        $object->assert(['foo' => 'bar']);
    }
}
