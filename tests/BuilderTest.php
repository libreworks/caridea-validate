<?php
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015 LibreWorks contributors
 * @license   http://opensource.org/licenses/Apache-2.0 Apache 2.0 License
 */
namespace Caridea\Validate;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-07-21 at 15:06:03.
 */
class BuilderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @covers Caridea\Validate\Builder::__construct
     * @covers Caridea\Validate\Builder::register
     * @covers Caridea\Validate\Builder::build
     * @covers Caridea\Validate\Builder::getRule
     */
    public function testRegister()
    {
        $ruleset = (object)[
            'name' => 'required',
            'email' => ['required', 'email'],
            'gender' => (object)[ 'one_of' => [['female']] ],
            'phone' => (object)['max_length' => 10],
        ];
        $object= new Builder();
        $this->assertSame($object, $object->register(['max_length', [Rule\Length::class, 'max']]));
        $validator = $object->build($ruleset);
        $result = $validator->validate(['name' => null, 'email' => 'foo', 'gender' => 'male', 'phone' => '123123123123']);
        $this->assertEquals(['name' => 'REQUIRED', 'email' => 'WRONG_EMAIL', 'gender' => 'NOT_ALLOWED_VALUE', 'phone' => 'TOO_LONG'], $result->getErrors());
    }
    
    /**
     * @covers Caridea\Validate\Builder::getRule
     * @expectedException \UnexpectedValueException
     * @expectedExceptionMessage Definitions must return Rule objects
     */
    public function testRule()
    {
        $ruleset = (object)[
            'name' => 'custom'
        ];
        $object = new Builder();
        $object->register(['custom' => [$this, 'foo']]);
        $object->build($ruleset);
    }

    /**
     * @covers Caridea\Validate\Builder::getRule
     */
    public function testDraft()
    {
        $ruleset = (object)[
            'name' => 'custom'
        ];
        $object = new Builder();
        $object->register(['custom' => [$this, 'bar']]);
        $object->build($ruleset);
        $this->verifyMockObjects();
    }
    
    public function foo()
    {
        return 123;
    }
    
    public function bar()
    {
        $draft = $this->getMockForAbstractClass(Draft::class);
        $draft->expects($this->once())
            ->method('finish')
            ->willReturn(null);
        return $draft;
    }
}
