<?php
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015-2018 LibreWorks contributors
 * @license   Apache-2.0
 */
namespace Caridea\Validate;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-07-21 at 15:06:03.
 */
class BuilderTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @covers Caridea\Validate\Builder::__construct
     * @covers Caridea\Validate\Builder::field
     * @covers Caridea\Validate\Builder::build
     * @covers Caridea\Validate\Parser::getRule
     */
    public function testField()
    {
        $object = new Builder(new Parser(new Registry()));
        $this->assertSame($object, $object->field('name', 'required'));
        $this->assertSame($object, $object->field('email', 'required', ['email' => '']));
        $this->assertSame($object, $object->field('gender', ['one_of' => [['female']]]));
        $this->assertSame($object, $object->field('phone', (object)['max_length' => 10]));
        $this->assertSame($object, $object->field('password2', (object)['equal_to_field' => 'password']));
        $validator = $object->build();
        $result = $validator->validate(['name' => null, 'email' => 'foo', 'gender' => 'male', 'phone' => '123123123123', 'password' => 'hello', 'password2' => 'goodbye']);
        $this->assertEquals(['name' => 'REQUIRED', 'email' => 'WRONG_EMAIL', 'gender' => 'NOT_ALLOWED_VALUE', 'phone' => 'TOO_LONG', 'password2' => 'FIELDS_NOT_EQUAL'], $result->getErrors());
    }

    /**
     * @covers Caridea\Validate\Builder::__construct
     * @covers Caridea\Validate\Builder::field
     * @covers Caridea\Validate\Builder::build
     * @covers Caridea\Validate\Parser::getRule
     */
    public function testBuild()
    {
        $object = new Builder(new Parser(new Registry()));
        $ruleset = [
            'name' => 'required',
            'email' => ['required', ['email' => '']],
            'gender' => ['one_of' => [['female']]],
            'phone' => (object)['max_length' => 10],
            'password2' => (object)['equal_to_field' => 'password'],
        ];
        $validator = $object->build($ruleset);
        $result = $validator->validate(['name' => null, 'email' => 'foo', 'gender' => 'male', 'phone' => '123123123123', 'password' => 'hello', 'password2' => 'goodbye']);
        $this->assertEquals(['name' => 'REQUIRED', 'email' => 'WRONG_EMAIL', 'gender' => 'NOT_ALLOWED_VALUE', 'phone' => 'TOO_LONG', 'password2' => 'FIELDS_NOT_EQUAL'], $result->getErrors());
    }

    /**
     * @covers Caridea\Validate\Parser::getRule
     * @expectedException \UnexpectedValueException
     * @expectedExceptionMessage Definitions must return Rule objects
     */
    public function testRule()
    {
        $ruleset = (object)[
            'name' => 'custom'
        ];
        $registry = new Registry();
        $registry->register(['custom' => [$this, 'foo']]);
        $object = new Builder(new Parser($registry));
        $object->build($ruleset);
    }

    /**
     * @covers Caridea\Validate\Parser::getRule
     */
    public function testDraft()
    {
        $ruleset = (object)[
            'name' => 'custom'
        ];
        $registry = new Registry();
        $registry->register(['custom' => [$this, 'bar']]);
        $object = new Builder(new Parser($registry));
        $object->build($ruleset);
        $this->verifyMockObjects();
    }

    public function foo()
    {
        return 123;
    }

    public function bar()
    {
        $rule = $this->getMockForAbstractClass(Rule::class);
        $draft = $this->getMockForAbstractClass(Draft::class);
        $draft->expects($this->once())
            ->method('finish')
            ->willReturn($rule);
        return $draft;
    }
}
