<?php
declare(strict_types=1);
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015-2016 LibreWorks contributors
 * @license   http://opensource.org/licenses/Apache-2.0 Apache 2.0 License
 */
namespace Caridea\Validate\Rule;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-07-21 at 14:06:20.
 */
class MatchTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @covers Caridea\Validate\Rule\Match::__construct
     * @covers Caridea\Validate\Rule\Match::apply
     */
    public function testApply()
    {
        $object = new Match("/^[a-z]+$/", 'YOU_LOSE');
        $this->assertEquals(['FORMAT_ERROR'], $object->apply([]));
        $this->assertNull($object->apply('hello'));
        $this->assertEquals(['YOU_LOSE'], $object->apply('hello!'));
        
        $object = new Match("/^[a-z]+$/");
        $this->assertNull($object->apply('hello'));
        $this->assertEquals(['WRONG_FORMAT'], $object->apply('hello!'));
    }

    /**
     * @covers Caridea\Validate\Rule\Match::like
     */
    public function testLike()
    {
        $object = Match::like("^[a-z0-9]+$", 'i');
        $this->assertEquals(['FORMAT_ERROR'], $object->apply([]));
        $this->assertNull($object->apply('Hello1'));
        $this->assertEquals(['WRONG_FORMAT'], $object->apply('Hello1!'));
    }

    /**
     * @covers Caridea\Validate\Rule\Match::url
     */
    public function testUrl()
    {
        $object = Match::url();
        $this->assertEquals(['FORMAT_ERROR'], $object->apply([]));
        $this->assertNull($object->apply('http://example.com/?aoeu.htns#1234'));
        $this->assertNull($object->apply('https://example.com/hello/file.ext?aoeu=123&htns=456'));
        $this->assertNull($object->apply('https://example.com/hello/file.ext'));
        $this->assertNull($object->apply('https://example.com/hello/'));
        $this->assertNull($object->apply('http://123.123.123.123'));
        $this->assertEquals(['WRONG_URL'], $object->apply('Hello1!'));
    }

    /**
     * @covers Caridea\Validate\Rule\Match::email
     */
    public function testEmail()
    {
        $object = Match::email();
        $this->assertEquals(['FORMAT_ERROR'], $object->apply([]));
        $this->assertNull($object->apply('user@example.com'));
        $this->assertNull($object->apply('user.foo@127.0.0.1'));
        $this->assertNull($object->apply('user.foo@example'));
        $this->assertNull($object->apply('user.foo@example.com'));
        $this->assertNull($object->apply('user+foo@example.com'));
        $this->assertEquals(['WRONG_EMAIL'], $object->apply('user@example com'));
    }

    /**
     * @covers Caridea\Validate\Rule\Match::isoDate
     */
    public function testIsoDate()
    {
        $object = Match::isoDate();
        $this->assertEquals(['FORMAT_ERROR'], $object->apply([]));
        $this->assertNull($object->apply('2014-01-01'));
        $this->assertNull($object->apply('2014-12-31'));
        $this->assertNull($object->apply('2014-10-20'));
        $this->assertEquals(['WRONG_DATE'], $object->apply('no'));
        $this->assertEquals(['WRONG_DATE'], $object->apply('123-34-12'));
        $this->assertEquals(['WRONG_DATE'], $object->apply('1997-24-12'));
        $this->assertEquals(['WRONG_DATE'], $object->apply('2009-12-41'));
        $this->assertEquals(['WRONG_DATE'], $object->apply('2009-12-00'));
        $this->assertEquals(['WRONG_DATE'], $object->apply('2009-12-32'));
    }
}
