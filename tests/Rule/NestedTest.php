<?php
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015-2016 LibreWorks contributors
 * @license   http://opensource.org/licenses/Apache-2.0 Apache 2.0 License
 */
namespace Caridea\Validate\Rule;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-07-21 at 15:24:01.
 */
class NestedTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @covers Caridea\Validate\Rule\Nested::apply
     * @expectedException \BadMethodCallException
     * @expectedExceptionMessage This rule is a Draft. Try calling the 'finish' method to get the full Rule.
     */
    public function testDraft()
    {
        $object = Nested::nestedObject(['name' => 'required']);
        $object->apply(null);
    }
    
    /**
     * @covers Caridea\Validate\Rule\Nested::apply
     */
    public function testArgument()
    {
        $builder = new \Caridea\Validate\Builder();
        $object = Nested::nestedObject(['name' => 'required']);
        $rule = $object->finish($builder);
        $this->assertEquals('FORMAT_ERROR', $rule->apply(123));
    }
    
    /**
     * @covers Caridea\Validate\Rule\Nested::nestedObject
     * @covers Caridea\Validate\Rule\Nested::__construct
     * @covers Caridea\Validate\Rule\Nested::finish
     * @covers Caridea\Validate\Rule\Nested::apply
     */
    public function testNestedObject()
    {
        $builder = new \Caridea\Validate\Builder();
        $object = Nested::nestedObject(['name' => 'required']);
        $rule = $object->finish($builder);
        $this->assertNull($rule->apply(['name' => 'hey']));
        $this->assertEquals(['name' => 'REQUIRED'], $rule->apply([]));
        $this->assertSame($rule, $rule->finish($builder));
    }

    /**
     * @covers Caridea\Validate\Rule\Nested::listOf
     * @covers Caridea\Validate\Rule\Nested::__construct
     * @covers Caridea\Validate\Rule\Nested::finish
     * @covers Caridea\Validate\Rule\Nested::apply
     */
    public function testListOf()
    {
        $builder = new \Caridea\Validate\Builder();
        $object = Nested::listOf(['required', 'email']);
        $rule = $object->finish($builder);
        $this->assertNull($rule->apply(['foo@example.com', 'foo.bar@example.com']));
        $this->assertEquals(['REQUIRED', 'WRONG_EMAIL'], $rule->apply(['', 'foo.bar@']));
        $this->assertSame($rule, $rule->finish($builder));
    }

    /**
     * @covers Caridea\Validate\Rule\Nested::listOfObjects
     * @covers Caridea\Validate\Rule\Nested::__construct
     * @covers Caridea\Validate\Rule\Nested::finish
     * @covers Caridea\Validate\Rule\Nested::apply
     */
    public function testListOfObjects()
    {
        $builder = new \Caridea\Validate\Builder();
        $object = Nested::listOfObjects((object)['name' => 'required']);
        $rule = $object->finish($builder);
        $this->assertNull($rule->apply([['name' => 'hey'], ['name' => 'hi']]));
        $this->assertEquals([['name' => 'REQUIRED'], 'FORMAT_ERROR'], $rule->apply([['age' => 21], 123]));
        $this->assertSame($rule, $rule->finish($builder));
    }

    /**
     * @covers Caridea\Validate\Rule\Nested::listOfDifferentObjects
     * @covers Caridea\Validate\Rule\Nested::__construct
     * @covers Caridea\Validate\Rule\Nested::finish
     * @covers Caridea\Validate\Rule\Nested::apply
     */
    public function testListOfDifferentObjects()
    {
        $builder = new \Caridea\Validate\Builder();
        $object = Nested::listOfDifferentObjects('type', (object)['foo' => (object)['name' => 'required'], 'bar' => (object)['email' => 'email']]);
        $rule = $object->finish($builder);
        $this->assertNull($rule->apply([['type' => 'foo', 'name' => 'hey'], ['type' => 'bar', 'email' => 'me@example.com']]));
        $this->assertNull($rule->apply([['type' => 'foo', 'name' => 'hey'], ['type' => 'bar', 'email' => 'me@example.com']]));
        $this->assertEquals([['name' => 'REQUIRED'], ['email' => 'WRONG_EMAIL']], $rule->apply([['type' => 'foo'], ['type' => 'bar', 'email' => 'aoeu']]));
        $this->assertSame($rule, $rule->finish($builder));
    }
}
