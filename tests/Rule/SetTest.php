<?php
declare(strict_types=1);
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015-2018 LibreWorks contributors
 * @license   Apache-2.0
 */
namespace Caridea\Validate\Rule;

/**
 * Generated by hand.
 */
class SetTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @covers Caridea\Validate\Rule\Set::__construct
     * @covers Caridea\Validate\Rule\Set::count
     * @covers Caridea\Validate\Rule\Set::add
     * @covers Caridea\Validate\Rule\Set::addAll
     */
    public function testCount()
    {
        $object = new Set();
        $this->assertSame(0, count($object));
        $object = new Set([Blank::required()]);
        $this->assertSame(1, count($object));
    }

    /**
     * @covers Caridea\Validate\Rule\Set::__construct
     * @covers Caridea\Validate\Rule\Set::getIterator
     */
    public function testGetIterator()
    {
        $object = new Set();
        $this->assertInstanceOf(\ArrayIterator::class, $object->getIterator());
    }

    /**
     * @covers Caridea\Validate\Rule\Set::__construct
     * @covers Caridea\Validate\Rule\Set::add
     * @covers Caridea\Validate\Rule\Set::addAll
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage Only Rule objects are allowed
     */
    public function testAddAllBad()
    {
        $object = new Set();
        $object->addAll([null]);
    }

    /**
     * @covers Caridea\Validate\Rule\Set::__construct
     * @covers Caridea\Validate\Rule\Set::add
     */
    public function testAdd()
    {
        $object = new Set();
        $this->assertSame(0, count($object));
        $object->add(Blank::notEmpty());
        $this->assertSame(1, count($object));
    }

    /**
     * @covers Caridea\Validate\Rule\Set::__construct
     * @covers Caridea\Validate\Rule\Set::add
     * @covers Caridea\Validate\Rule\Set::addAll
     * @covers Caridea\Validate\Rule\Set::merge
     */
    public function testMerge()
    {
        $object = new Set([Blank::required()]);
        $this->assertEquals(1, count($object));
        $object2 = new Set([Blank::notEmpty(), Blank::notEmptyList()]);
        $this->assertEquals(2, count($object2));
        $return = $object->merge($object2);
        $this->assertSame($object, $return);
        $this->assertEquals(3, count($return));
    }

    /**
    * @covers Caridea\Validate\Rule\Set::__construct
    * @covers Caridea\Validate\Rule\Set::add
    * @covers Caridea\Validate\Rule\Set::addAll
    * @covers Caridea\Validate\Rule\Set::apply
     */
    public function testApplyNoMessage()
    {
        $object = new Set([Blank::required(), Compare::oneOf(['foo', 'bar'])]);
        $this->assertNull($object->apply('foo'));
        $this->assertEquals(['REQUIRED'], $object->apply(null));
        $this->assertEquals(['NOT_ALLOWED_VALUE'], $object->apply('hi'));
    }

    /**
    * @covers Caridea\Validate\Rule\Set::__construct
    * @covers Caridea\Validate\Rule\Set::add
    * @covers Caridea\Validate\Rule\Set::addAll
    * @covers Caridea\Validate\Rule\Set::apply
     */
    public function testApplyMessage()
    {
        $object = new Set([Blank::required(), Compare::oneOf(['foo', 'bar'])], 'NOT_GOOD_DUDE');
        $this->assertNull($object->apply('foo'));
        $this->assertEquals(['NOT_GOOD_DUDE'], $object->apply(null));
        $this->assertEquals(['NOT_GOOD_DUDE'], $object->apply('hi'));
    }

    /**
    * @covers Caridea\Validate\Rule\Set::__construct
    * @covers Caridea\Validate\Rule\Set::setError
    * @covers Caridea\Validate\Rule\Set::getError
     */
    public function testGetMessage()
    {
        $object = new Set();
        $this->assertNull($object->getError());
        $this->assertSame($object, $object->setError(null));
        $this->assertNull($object->getError());
        $this->assertSame($object, $object->setError('TEST'));
        $this->assertEquals('TEST', $object->getError());
    }
}
